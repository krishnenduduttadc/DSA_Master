package GraphL2;

import java.util.Scanner;

public class MinimizeMalwareSpread {
    public static void main(String[] args) throws Exception {
        // Hardcoded input
        String input = "3\n" +
                "1 1 0\n" +
                "1 1 0\n" +
                "0 0 1\n" +
                "2\n" +
                "0 1\n";

        Scanner scn = new Scanner(input);
        int n = 3; // Hardcoded value for n
        int[][] graph = new int[n][n];
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                graph[i][j] = scn.nextInt();
            }
        }
        int m = scn.nextInt();
        int[] initial = new int[m];
        for(int i = 0; i < m; i++){
            initial[i] = scn.nextInt();
        }
        System.out.println(minMalwareSpread(graph, initial));
    }

    static int[] par;
    static int[] size;

    public static int minMalwareSpread(int[][] graph, int[] initial){
        int n = graph.length;
        par = new int[n];
        size = new int[n];

        for (int i = 0; i < n; i++) {
            par[i] = i;
            size[i] = 1;
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (graph[i][j] == 1) {
                    int p1 = findPar(i);
                    int p2 = findPar(j);

                    if (p1 != p2) {
                        merge(p1, p2);
                    }
                }
            }
        }

        int[] infected = new int[n];
        for (int e : initial) {
            int p = findPar(e);
            infected[p]++;
        }

        int ans = -1;
        int maxSize = -1;
        for (int e : initial) {
            int p = findPar(e);
            if (infected[p] == 1 && size[p] >= maxSize) {
                if (maxSize == size[p]) {
                    ans = Math.min(ans, e);
                } else {
                    ans = e;
                }
                maxSize = size[p];
            }
        }

        if (ans == -1) {
            int min = n + 1;
            for (int e : initial) {
                min = Math.min(min, e);
            }
            return min;
        }

        return ans;
    }

    static int findPar(int u) {
        if (par[u] == u) {
            return u;
        }
        return par[u] = findPar(par[u]);
    }

    static void merge(int p1, int p2) {
        if (size[p1] > size[p2]) {
            par[p2] = p1;
            size[p1] += size[p2];
        } else {
            par[p1] = p2;
            size[p2] += size[p1];
        }
    }
}
